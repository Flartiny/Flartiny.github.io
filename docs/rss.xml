<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Flartiny's Blog</title><link>https://Flartiny.github.io</link><description>事已至此,先吃点吧...</description><copyright>Flartiny's Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/32789998?v=4</url><title>avatar</title><link>https://Flartiny.github.io</link></image><lastBuildDate>Thu, 24 Oct 2024 12:47:26 +0000</lastBuildDate><managingEditor>Flartiny's Blog</managingEditor><ttl>60</ttl><webMaster>Flartiny's Blog</webMaster><item><title>wordpress中文url导致的404</title><link>https://Flartiny.github.io/post/wordpress-zhong-wen-url-dao-zhi-de-404.html</link><description>找到wordpress的wp-includes目录下的class-wp.php文件&#13;
```php&#13;
//wp-includes/class-wp.php&#13;
 &#13;
$pathinfo = isset( $_SERVER['PATH_INFO'] ) ? $_SERVER['PATH_INFO'] : '';&#13;
//修改为：&#13;
$pathinfo = isset( $_SERVER['PATH_INFO'] ) ? mb_convert_encoding($_SERVER['PATH_INFO'], 'utf-8', 'GBK') : '';&#13;
//wp-includes/class-wp.php&#13;
list( $req_uri ) = explode( '?', $_SERVER['REQUEST_URI'] );&#13;
//修改为：&#13;
list( $req_uri ) = explode( '?', mb_convert_encoding($_SERVER['REQUEST_URI'], 'utf-8', 'GBK') );&#13;
```。</description><guid isPermaLink="true">https://Flartiny.github.io/post/wordpress-zhong-wen-url-dao-zhi-de-404.html</guid><pubDate>Tue, 08 Oct 2024 12:36:42 +0000</pubDate></item><item><title>electron-quick start遇到的一些问题</title><link>https://Flartiny.github.io/post/electron-quick%20start-yu-dao-de-yi-xie-wen-ti.html</link><description># electron-quick start遇到的一些问题&#13;
&#13;
## volta&#13;
&#13;
volta安装过程比较简单就跳过了&#13;
&#13;
**问题**：volta安装node时失败，Could not download Node version registry；Please verify your internet connection&#13;
&#13;
在volta安装路径比如```C:\Users\ ... \AppData\Local\Volta```新建hooks.json填入&#13;
&#13;
```json&#13;
{&#13;
    'node': {&#13;
        'index': {&#13;
            'template': 'https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/index.json'&#13;
        },&#13;
        'distro': {&#13;
            'template': 'https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/v{{version}}/{{filename}}'&#13;
        }&#13;
    }&#13;
}&#13;
```&#13;
&#13;
## 正式创建之前&#13;
&#13;
安装volta之后，在工作目录下```volta pin node@xx.xx.xx```&#13;
**问题**：```npm install --save-dev electron```遇到unable to verify the first certificate&#13;
网上一般的解决方法如下，可以简单尝试&#13;
&#13;
```&#13;
npm config set strict-ssl false&#13;
npm config set registry https://registry.npmmirror.com&#13;
```&#13;
&#13;
个人尝试以上步骤无效，换用另一个方法&#13;
&#13;
```&#13;
npm install -g cnpm --registry=https://registry.npmmirror.com   // 这条如果不成功，用管理员权限打开命令行执行&#13;
cnpm install --save-dev electron&#13;
```&#13;
&#13;
## quick start&#13;
&#13;
package.json结构参考&#13;
&#13;
```json&#13;
{&#13;
  'name': 'first_electron_app',&#13;
  'version': '1.0.0',&#13;
  'description': '',&#13;
  'main': 'main.js',&#13;
  'scripts': {&#13;
    'test': 'echo \'Error: no test specified\' &amp;&amp; exit 1',&#13;
    'start': 'electron .'&#13;
  },&#13;
  'author': 'Flartiny',&#13;
  'license': 'ISC',&#13;
  'volta': {&#13;
    'node': '18.20.4'&#13;
  },&#13;
  'devDependencies': {&#13;
    'electron': '^32.0.2'&#13;
  }&#13;
}&#13;
```&#13;
&#13;
1. 创建main.js&#13;
&#13;
```JavaScript&#13;
// main.js&#13;
&#13;
// Modules to control application life and create native browser window&#13;
const { app, BrowserWindow } = require('electron')&#13;
const path = require('node:path')&#13;
&#13;
const createWindow = () =&gt; {&#13;
  // Create the browser window.&#13;
  const mainWindow = new BrowserWindow({&#13;
    width: 800,&#13;
    height: 600,&#13;
    webPreferences: {&#13;
      preload: path.join(__dirname, 'preload.js')&#13;
    }&#13;
  })&#13;
&#13;
  // 加载 index.html&#13;
  mainWindow.loadFile('index.html')&#13;
&#13;
  // 打开开发工具&#13;
  // mainWindow.webContents.openDevTools()&#13;
}&#13;
&#13;
// 这段程序将会在 Electron 结束初始化&#13;
// 和创建浏览器窗口的时候调用&#13;
// 部分 API 在 ready 事件触发后才能使用。</description><guid isPermaLink="true">https://Flartiny.github.io/post/electron-quick%20start-yu-dao-de-yi-xie-wen-ti.html</guid><pubDate>Tue, 10 Sep 2024 14:00:27 +0000</pubDate></item><item><title>AMD下fTPM导致Windows 11音频随机卡顿</title><link>https://Flartiny.github.io/post/AMD-xia-fTPM-dao-zhi-Windows%2011-yin-pin-sui-ji-qia-dun.html</link><description>1. Win + R 运行 tpm.msc，查看 TPM 当前是否启用。</description><guid isPermaLink="true">https://Flartiny.github.io/post/AMD-xia-fTPM-dao-zhi-Windows%2011-yin-pin-sui-ji-qia-dun.html</guid><pubDate>Fri, 16 Aug 2024 12:33:09 +0000</pubDate></item><item><title>win11下pycharm调用wsl2内conda环境以使用jupyter</title><link>https://Flartiny.github.io/post/win11-xia-pycharm-diao-yong-wsl2-nei-conda-huan-jing-yi-shi-yong-jupyter.html</link><description>```&#13;
conda install jupyter&#13;
jupyter notebook --generate-config&#13;
vim ~/.jupyter/jupyter_notebook_config.py&#13;
```&#13;
需调整内容如下，可查看相应部分解释，若默认已符合以下状态则不用修改，否则取消注释并完成更改&#13;
&gt; c.ServerApp.open_browser = False&#13;
&gt; c.ServerApp.allow_origin = '*'&#13;
&gt; c.ServerApp.ip = '0.0.0.0'&#13;
&gt; c.ServerApp.allow_root = True&#13;
&#13;
第四条某种程度上是不推荐的做法，但是暂时没有找到好的解决方法&#13;
&#13;
---&#13;
## 2024/10/24更新&#13;
重装了wsl2，这次网络模式使用了Mirrored，可在wsl2内运行```jupyter lab --no-browser```获取相关信息，配置在pycharm-setting-jupyter servers-configured server中便可启动。</description><guid isPermaLink="true">https://Flartiny.github.io/post/win11-xia-pycharm-diao-yong-wsl2-nei-conda-huan-jing-yi-shi-yong-jupyter.html</guid><pubDate>Thu, 15 Aug 2024 13:48:14 +0000</pubDate></item><item><title>使用Wub(Windows Update Blocker)可能带来的影响</title><link>https://Flartiny.github.io/post/shi-yong-Wub%28Windows%20Update%20Blocker%29-ke-neng-dai-lai-de-ying-xiang.html</link><description>在使用win11系统的过程中，陆陆续续遇到了一些问题，后来突然意识到出问题的都是微软相关的服务：&#13;
&#13;
1. Microsoft Store无法连接&#13;
2. Xbox应用有时候连接也出问题&#13;
3. Minecraft验证和游戏内登录有时候失败&#13;
4. wsl2安装不成功&#13;
&#13;
重新在Wub把自动更新恢复到enable状态成功解决了以上问题，之后有需要再去禁用update就行。</description><guid isPermaLink="true">https://Flartiny.github.io/post/shi-yong-Wub%28Windows%20Update%20Blocker%29-ke-neng-dai-lai-de-ying-xiang.html</guid><pubDate>Wed, 14 Aug 2024 02:56:20 +0000</pubDate></item><item><title>Linux(Ubuntu 22.04)下Teamspeak服务器搭建</title><link>https://Flartiny.github.io/post/Linux%28Ubuntu%2022.04%29-xia-Teamspeak-fu-wu-qi-da-jian.html</link><description>Teamspeak可以部署在云服务器上为使用者提供语音等服务，而且不会占用太多资源&#13;
&#13;
由于网络因素，推荐本地下载后上传到云服务器&#13;
下载地址 https://teamspeak.com/zh-CN/downloads/#server&#13;
&#13;
```shell&#13;
// 上传后解压&#13;
tar -xvf filename&#13;
// 重命名&#13;
mv file teamspeak&#13;
// 移动到home目录&#13;
mv teamspeak /home&#13;
cd /home/teamspeak&#13;
// 创建teamspeak用户&#13;
useradd teamspeak&#13;
passwd teamspeak&#13;
// 赋予权限&#13;
su root&#13;
chown -R teamspeak:teamspeak /home/teamspeak/&#13;
// 切换到teamspeak用户&#13;
su teamspeak&#13;
```&#13;
&#13;
如果切换到teamspeak用户后，界面只显示$，请输入bash后回车即可临时解决&#13;
如果想永久解决，切换至root用户后，vim打开/etc/passwd文件，将最后一行的sh改为bash保存即可&#13;
&#13;
```shell&#13;
// 进入teamspeak目录，创建授权文件，初始化&#13;
touch .ts3server_license_accepted&#13;
./ts3server_startscript.sh start&#13;
```&#13;
&#13;
控制台反馈的token等信息建议复制保存在文件中，初次登录时或者未来出现特殊情况会用到&#13;
&#13;
```shell&#13;
// 端口管理&#13;
sudo apt install ufw -y&#13;
ufw enable&#13;
ufw allow ssh&#13;
ufw allow 9987/udp&#13;
ufw allow 30033/tcp&#13;
ufw status #查看ufw状态&#13;
// 也可以在服务器商处对端口放行&#13;
```&#13;
&#13;
![alt text](https://pub-d3faa1947eb448819cde832afc98290f.r2.dev/blog/2024/08/4aaf4783ffeb38eeb908dab3ddad49db.jpg)&#13;
&#13;
```shell&#13;
// 接下来是进程守护&#13;
vim /lib/systemd/system/teamspeak.service&#13;
```&#13;
&#13;
**teamspeak.service**中填入以下内容&#13;
如果之前路径不同的话，以下内容相应部分自行更改&#13;
&#13;
```service&#13;
[Unit]&#13;
Description=teamspeak&#13;
After=network.target&#13;
&#13;
[Service]&#13;
User=teamspeak&#13;
Group=teamspeak&#13;
Type=forking&#13;
WorkingDirectory=/home/teamspeak/&#13;
PIDFile=/home/teamspeak/ts3server.pid&#13;
ExecStart=/home/teamspeak/ts3server_startscript.sh start&#13;
ExecStop=/home/teamspeak/ts3server_startscript.sh stop&#13;
RestartSec=15&#13;
Restart=always&#13;
&#13;
[Install]&#13;
WantedBy=multi-user.target&#13;
```&#13;
&#13;
```shell&#13;
重启systemd&#13;
systemctl daemon-reload&#13;
// 开机自启动等操作&#13;
systemctl enable teamspeak.service&#13;
systemctl start teamspeak.service&#13;
systemctl restart teamspeak.service&#13;
systemctl stop teamspeak.service&#13;
// 如果进程守护出错，先停止ts服务再重试&#13;
```&#13;
&#13;
然后本机使用客户端连接ip就行了，第一次会要求输入token，&#13;
之后可以点击'工具-身份'将身份状态导出到本地&#13;
&#13;
---&#13;
&#13;
参考原文 https://blog.im.ci/study-notes/linux-notes/468/&#13;
汉化包和客户端资源 https://teamspeak.app/docs/&#13;
&#13;
之后可能补充ts机器人相关...&#13;
。</description><guid isPermaLink="true">https://Flartiny.github.io/post/Linux%28Ubuntu%2022.04%29-xia-Teamspeak-fu-wu-qi-da-jian.html</guid><pubDate>Tue, 13 Aug 2024 13:53:19 +0000</pubDate></item><item><title>Ubuntu 22.04 + 轻量云服务器 + WordPress + cloudns免费域名搭建博客</title><link>https://Flartiny.github.io/post/Ubuntu%2022.04%20%2B%20-qing-liang-yun-fu-wu-qi-%20%2B%20WordPress%20%2B%20cloudns-mian-fei-yu-ming-da-jian-bo-ke.html</link><description>一时兴起使用了基于github pages的博客后，想再整点花里胡哨的。</description><guid isPermaLink="true">https://Flartiny.github.io/post/Ubuntu%2022.04%20%2B%20-qing-liang-yun-fu-wu-qi-%20%2B%20WordPress%20%2B%20cloudns-mian-fei-yu-ming-da-jian-bo-ke.html</guid><pubDate>Sat, 10 Aug 2024 07:00:37 +0000</pubDate></item></channel></rss>